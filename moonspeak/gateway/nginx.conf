error_log /dev/stderr error;

events {
  worker_connections  1024;
}

http {
    access_log /dev/stdout combined;

    # when running on docker-compose:
    # see: https://stackoverflow.com/questions/57937222/502-bad-gateway-nginx-no-resolver-defined-to-resolve
    resolver 127.0.0.11 1.1.1.1 8.8.8.8;

    # speed hack: we know the insides of landing service and want
    # to avoid two 307 redirects, so force add the language parameter now
    # language check order:
    map "$cookie_lang#$http_accept_language#$host" $lang {
        # 0 - what language cookie you have (allow special "localhost" lang)
        "~*^en" "en";
        "~*^ru" "ru";
        "~*^localhost" "localhost";

        # 1 - what does accept_language header have
        "~*#en" "en";
        "~*#ru" "ru";

        # 2 - what domain are you targetting, useful for tools that normally dont supply accept_language header
        "~*ru$" "ru";
        "~*localhost$" "localhost";

        # finally use english by default
        default "en";
    }

    map "$request_uri" $instance {
        "~*^/router/route/([^/]+)" $1;
    }

    upstream @router {
        server unix:../unixsocks/router.sock;
    }

    #====================================
    # info sec
    # mozilla guidelines: https://infosec.mozilla.org/guidelines/web_security.html
    # check headers: https://securityheaders.com/

    # hide exact nginx version
    server_tokens off;

    # enforce HTTPS but not forever, to allow localhost testing
    # proxy_hide_header "Strict-Transport-Security";
    # add_header "Strict-Transport-Security" "max-age=31536 ; includeSubDomains";

    # do not want to leak capability URLs (unique strings) via Referrer header
    # see: https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns
    proxy_hide_header "Referrer-Policy";
    add_header "Referrer-Policy" "origin";

    # only allow this site to iframe itself, prevent malicious sites from embedding this in an iframe
    proxy_hide_header "X-Frame-Options";
    add_header "X-Frame-Options" "SAMEORIGIN";

    # prevent browsers from guessing mime type
    proxy_hide_header "X-Content-Type-Options";
    add_header "X-Content-Type-Options" "nosniff";

    # configure log format for storing CSP violation reports, see CSP config details below
    log_format reportcsp escape=none "CSP violation report: $request_body";

    # nginx will compress info on the fly as its going out
    # see: https://docs.nginx.com/nginx/admin-guide/web-server/compression/
    gzip on;
    gzip_types text/plain text/xml text/css application/javascript;
    gzip_min_length 1000;

    server {
        # this is only activated on prod
        # there we docker forward port 80 -> 8443
        # and this forces all http to https
        listen 0.0.0.0:8443;
        server_name _;
        return 307 https://$host$request_uri;
    }

    #====================================
    server {
        # server_name "~^.+[.](?P<domain>.+)$";
        listen      0.0.0.0:80 default_server;

        # SSL start
        # when running in docker-compose in production bind mount certificates
        listen      0.0.0.0:443 ssl http2 default_server;
        ssl_certificate fullchain.pem;
        ssl_certificate_key privkey.pem;
        # SSL end

        # Content-Security-Policy
        # see: https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html
        # csp with nginx: https://chrisguitarguy.com/2019/07/05/working-with-multiple-content-security-policy-headers/
        set $CSP "report-uri /reportcsp";
        set $CSP "${CSP}; object-src 'none'";
        set $CSP "${CSP}; img-src 'self' data:";
        set $CSP "${CSP}; style-src 'self' 'unsafe-inline'";
        set $CSP "${CSP}; default-src 'self'; script-src 'self' 'unsafe-inline'; font-src 'self'";
        set $CSP "${CSP}; base-uri 'self'; form-action 'self'; connect-src 'self'; frame-ancestors 'self'";
        add_header "Content-Security-Policy-Report-Only" $CSP;

        # set $router router.moonspeak.$domain;
        set $router unix:../unixsocks/router.sock:;

        # Pass the original header + port,
        # so router service can set the <base> tag including the port
        proxy_set_header Host    $host:$proxy_port;

        #==============================
        # store CSP violation reports
        location /reportcsp {
            # nginx does not read body of request unless its used somewhere, so must do a dummy proxy_pass to itself
            # see: https://stackoverflow.com/questions/4939382/logging-post-data-from-request-body
            access_log /dev/stdout reportcsp;
            proxy_pass $scheme://127.0.0.1/reportcsp/dummy;
        }

        location /reportcsp/dummy {
            access_log off;
            return 200;
        }

        #==============================
        # deploy needs direct access to user's connection for request limiting
        location /deploy/ {
            # return 307 http://deploy.moonspeak.$domain$request_uri;
            return 404;
        }

        #==============================
        # landing page
        location = / {
            # speed hack: we know the insides of landing service and want
            # to avoid two 307 redirects, so force add the language parameter now
            proxy_redirect / /landing/;
            proxy_pass http://@router/route/landing/$lang/;
        }

        location /landing/ {
            proxy_redirect / /landing/;
            proxy_pass http://@router/route/landing/;
        }

        # #==============================
        # # features
        location /suggestions/ {
            proxy_redirect / /suggestions/;
            proxy_pass http://@router/route$request_uri;
        }

        location /synonyms/ {
            proxy_redirect / /synonyms/;
            proxy_pass http://@router/route$request_uri;
        }

        location /plus/ {
            proxy_redirect / /plus/;
            proxy_pass http://@router/route$request_uri;
        }

        location /demo {
            # get the exact url string from docker-compose and graph microservice README.txt
            return 307 "/router/route/u-demouser1-s-graph/?lang=i18n";
        }

        location /grafana {
            # redirect to grafana default port 3000 on localhost
            return 307 http://$host:3000/explore;
        }

        #==============================
        # router and manager
        location /manager/ {
            proxy_redirect / /manager/;
            proxy_pass http://@router/route$request_uri;
        }

        location @handle_router_503 {
            # if its a user service, then manager should bring it up
            return 307 /manager/handle$request_uri;
        }

        location /router/route/ {
            # specifically when a user's service is down, we handle it by passing to manager who can bring the service up
            proxy_intercept_errors on;
            error_page 503 @handle_router_503;
            proxy_redirect / /router/route/$instance/;
            proxy_pass http://@router/route/;
        }

        #==============================
        # any routes not mentioned are 404 and ignored
        location / {
            return 404;
        }
    }
}
